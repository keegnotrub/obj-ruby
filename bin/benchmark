#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "benchmark"

SIZE = 1_000_000
COLS = 12

Benchmark.bm(COLS) do |bm|
  bm.report("Warmup:") do
    require "obj_ruby"
    require "obj_ruby/cocoa"
  end
  
  bm.report("NSDictionary:") do
    dict = ObjRuby::NSMutableDictionary.new
    (0...SIZE).each do |i|
      if i % 2 == 0
        dict.setObject_forKey("foo", i)
      end
    end
    raise unless dict.count == SIZE / 2
    (0...SIZE).each do |i|
      unless dict.objectForKey(i)
        dict.setObject_forKey("bar", i)
      end
    end
    raise unless dict.count == SIZE
  end

  bm.report("Hash:") do
    hash = Hash.new
    (0...SIZE).each do |i|
      if i % 2 == 0
        hash[i] = "foo"
      end
    end
    raise unless hash.size == SIZE / 2
    (0...SIZE).each do |i|
      unless hash[i]
        hash[i] = "bar"
      end
    end
    raise unless hash.size == SIZE
  end

  bm.report("NSSet:") do
    set = ObjRuby::NSMutableSet.new
    (0...SIZE).each do |i|
      if i % 2 == 0
        set.addObject(i)
      end
    end
    raise unless set.count == SIZE / 2
    (0...SIZE).each do |i|
      unless set.containsObject(i)
        set.addObject(i)
      end
    end
    raise unless set.count == SIZE
  end

  bm.report("Set:") do
    set = Set.new
    (0...SIZE).each do |i|
      if i % 2 == 0
        set << i
      end
    end
    raise unless set.size == SIZE / 2
    (0...SIZE).each do |i|
      unless set.include?(i)
        set << i
      end
    end
    raise unless set.size == SIZE
  end

  bm.report("NSArray:") do
    array = ObjRuby::NSMutableArray.new
    (0...SIZE).each do |i|
      if i % 2 == 0
        array.addObject("foo")
      end
    end
    raise unless array.count == SIZE / 2
    (0...SIZE).each do |i|
      unless i % 2 == 0
        array.addObject("bar")
      end
    end
    raise unless array.count == SIZE
  end

  bm.report("Array:") do
    array = Array.new
    (0...SIZE).each do |i|
      if i % 2 == 0
        array << "foo"
      end
    end
    raise unless array.size == SIZE / 2
    (0...SIZE).each do |i|
      unless i % 2 == 0
        array << "bar"
      end
    end
    raise unless array.size == SIZE
  end
end
